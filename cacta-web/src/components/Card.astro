---
import { Image } from "astro:assets";
interface Props {
	image?: string;
	preTitle?: string;
	title?: string;
	description?: string;
	href?: string;
}
const { title, description, image, preTitle, href } = Astro.props;
---

<div class="max-w-sm bg-white border border-gray-200 rounded-lg card">
	<Image
		class="rounded-t-[1rem] w-full max-h-[225px] object-cover opacity-85 image"
		src={image}
		alt={`image about ${image}`}
	/>

	<div class="p-5">
		<p class="font-normal text-gray-700">
			{preTitle}
		</p>

		<h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900">
			{title}
		</h5>

		<p class="mb-5 font-normal text-gray-700">
			{description}
		</p>
		<a
			href={href}
			id="read-more"
			class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg focus:ring-4 focus:outline-none focus:ring-blue-300">
			Read more
			<svg
				class="rtl:rotate-180 w-3.5 h-3.5 ms-2"
				aria-hidden="true"
				fill="none"
				viewBox="0 0 14 10">
				<path
					stroke="currentColor"
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M1 5h12m0 0L9 1m4 4L9 9"></path>
			</svg>
		</a>
	</div>
</div>

<script>
	const anchor = document.getElementById("read-more");

	function saveScrollPosition() {
		const scrollY = window.scrollY || window.pageYOffset;
		history.pushState({ scrollY }, document.title);
	}

	function restoreScrollPosition() {
		const { scrollY } = history.state || { scrollY: 0 };
		scrollTo(0, scrollY);
	}

	anchor?.addEventListener("click", () => {
		saveScrollPosition();
	});

	// Maneja el evento popstate para restaurar la posici√≥n de desplazamiento
	window.addEventListener("popstate", restoreScrollPosition);
</script>

<style>
	.card {
		min-width: 350px;
		border-radius: 1rem;
		view-transition-name: card;
	}

	.card:nth-child(2) {
		transform: translate(0, -5em);
	}

	.card:hover {
		filter: drop-shadow(0 0 0.05rem #63e);
		cursor: crosshair;
	}
	a {
		background: radial-gradient(125% 125% at 50% 10%, #fff 00%, #63e 100%);
		color: black;
	}
	a:hover {
		background: #63e;
		color: #fff;
	}
	.card {
		animation: zoomIn linear both;

		animation-timeline: view();
		animation-range: entry 20% cover 30%;

		will-change: filter;
		transition: filter 300ms;
	}

	@keyframes zoomIn {
		from {
			opacity: 0.2;
			transform: translate3d(0, 10em, 0);
		}
	}
</style>
